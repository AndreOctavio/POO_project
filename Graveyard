        if(str_index.get(0) == 4) {
            aux = 1;
            /* Check if first card from possible straight are part of a Royal */
            if(!isRoyal(orig_hand.get(str_index.get(3) - 1))){
                aux = 0;
            }
            for(i = 3; i < 6 && aux != 0; i++){
                /* Check if all cards from possible straight are part of a Royal */
                if(!isRoyal(orig_hand.get(str_index.get(i + 1) - 1))){
                    aux = 0;
                    break;
                }

                /* check if all of them have the same suit */
                if(orig_hand.get(str_index.get(i) - 1).naipe != orig_hand.get(str_index.get(i + 1) - 1).naipe){

                    aux = 0;
                    break;
                }
            }

            /* we have a 4 to Royal Flush */
            if (aux == 1){

                for(i = 3; i < 7 && aux != 0; i++){
                    hold.add(str_index.get(i));
                }
                return hold;
            }
        }

        if (flush_count(changed_hand) == 4) { // It is a 4 to a Flush
            char naipe = 0;

            /* Search for the suit that doesn't belong to the Flush */
            for (i = 0; i < 5; i++) { // scans the positions of orig_hand aray
                if (i == 4) { // the last position doesn't have to make a comparison with its next card
                    hold.add(i + 1); // hold of the last card
                } else if (orig_hand.get(i).naipe == orig_hand.get(i + 1).naipe) { // comparing 2 consecutive cards
                    naipe = orig_hand.get(i).naipe; // saving the suit value of the Flush
                    hold.add(i + 1); // hold of the card orig_card[i]
                } else {
                    if (orig_hand.get(i).naipe == naipe) { // in case there's a "wrong" card in the middle
                        hold.add(i + 1);
                    } else if (i == 0) { // if in the 1st iteration there's a card with a suit different from the
                                         // Flush's suit
                        if (orig_hand.get(i).naipe == orig_hand.get(2).naipe) { // suit of index 0 = suit index 2 ->
                                                                                // suit of index 1 !=
                            hold.add(i + 1);
                        } else if (orig_hand.get(i).naipe != orig_hand.get(2).naipe) {
                            hold.add(i + 2); // suit of index 0 != suit index 2 ->
                            // suit of 1st card, orig_card[0] has a different suit from the Flush's suit
                        }
                    } else {
                        System.out.println("Error: problem in flsuh_count");
                    }
                    i++;
                }
            }
            return hold;
        }

        if(str_index.get(0) == 3) {
            aux = 1;
            
            if(!isRoyal(orig_hand.get(str_index.get(3)))){
                aux = 0;
            }

            for(i = 3; i < 5 && aux != 0; i++){
                /* Check if all cards from possible straight are part of a Royal */
                if(!isRoyal(orig_hand.get(str_index.get(i + 1)))){
                    aux = 0;
                    break;
                }

                /* check if all of them have the same suit */
                if(orig_hand.get(str_index.get(i)).naipe != orig_hand.get(str_index.get(i + 1)).naipe){
                    aux = 0;
                    break;
                }
            }

            /* we have a 4 to Royal Flush */
            if (aux == 1){
                for(i = 3; i < 7 && aux != 0; i++){
                    hold.add(str_index.get(i));
                }
                return hold;
            }
        }